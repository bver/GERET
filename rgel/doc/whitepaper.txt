
rgel:
-----

specifically designed for use in clouds

core concepts:
--------------

*** Genotype 
(container (mostly numbers vector), save/load )
initialisation, mutation, crossover, shorten..
Holland's inversion operator?

*** Grammar 
(parsing multiple-grammar EBNF+BNTL files)
indentation support?
weights support
EBNF .. production rules
BNTL .. template library (specific language template) ??
ASR .. abstract syntax rules
templates/language/templname.bntl

BNTL:
templates/javascript/if-then.bntl
if( <0> ) {
  <1> 
}


ASR:
statement ::= statement statement |
              #if-then( bool, statement ) |
              #if-then-else( bool, statement, statement ) |
              #while( bool, statement ) |
              #assignment( variable, expression ) |
              ...
bool ::= ...

./asr2bnf.rb my.asr templates/parrot > my.ebnf

*** Mappings 
(influences all above concepts, using Proc closures)
class SingleMapping
class LocusMapping
module BucketPolymorphism
module IntrinsicPolymorphism
module NoWrapping ??
module Wrapping ??
classes: SingleIntrinsic, LocusIntrinsic, SingleBucket, BucketIntrinsic
{ :wrapping => 10, :max_allele=>256, ... }

instance variable:

mapping = SingleBucket.new { :wrapping => 10, :max_allele=>256 }
gen = Genotype.new mapping
gram = Grammar.new( 'description.bnf', mapping )

or global class variable:

$default_mapping = SingleBucket.new { :wrapping => 10, :max_allele=>256 }
gen = Genotype.new
gram = Grammar.new( 'description.bnf' )

both variants supported via mapping=$default_mapping default argument.

*** Phenotype
  is a source text (or pcode) only?
(several different ones)
invalid mapping (nil) possible (due to wrapping)
indentation support?
pattern library support?

*** Objectives, ObjectivesVector 
(w/ Pareto dominance)
  userFn = proc {|my,other| my <==> other+1 }
  obj = Objectives.new { :perform => [0.0, :max], :parsimony => [100, :min], :user => [0.0, userFn ] }
  vector = ObjectivesVector.new obj
  vector[:parsimony] = 12
  vector.set { :perform=>3, :user=>5.6 }

*** Individual 
(binds Genotype, ObjectivesVector and cached Phenotypes)

*** Pool 
(of Individuals)
merging, decimating..?
elitism support
steady state / generational
lambda+mi, lambda,mi ?

*** Selectors 
(roulette, SUS, rand, tournament?)
replacement strategies

*** Machine
vm = Machine.new( code )
result = vm.run( data )  # data & result .. arrays
start simple: data,result ~ row in table


Storage
a simple table-oriented mechanism:

storage.each  do |row|
  input_data_vector, desired_output_data_vector = row[0...N], row[N...row.size]
  compare_vector = individual.run( input_data_vector ) 
  compare_vector.concat( desired_output_data_vector )
  single_objective_value += fitness.run( compare_vector )
end

*** Random
(predefined decisions for testing purposes)

*** Statistics
max,min,avg...
diversity measurement?
selection pressure/intensity measurement


rgel-parrot binding
-------------------

ParrotMachine < Machine


rgel-sqlite
-----------

SqliteStorage < Storage

data storage techniques


rgel-simpledb
-------------

SimpleDbStorage < Storage
http://developer.amazonwebservices.com/connect/entry.jspa?externalID=1435&categoryID=148
ActiveRecordtoSDB is just a simple wrapper class which implements some extra functionality on top of RightAWS ActiveSDB. The goal is to make it easier to transition the appropriate models of a project from a traditional RDBMS to SimpleDB, by implementing some of the most used functionality of ActiveRecord.

rgel-ebs
--------

http://aws.amazon.com/ebs/
Amazon EBS allows you to create storage volumes from 1 GB to 1 TB that can be mounted as devices by Amazon EC2 instances. Multiple volumes can be mounted to the same instance.
SqliteStorage


advanced techniques
-------------------

diplody (mapping)
fitness sharing
diversity preserving operators
?

