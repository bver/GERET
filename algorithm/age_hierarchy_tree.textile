h1. Age Hierarchy Tree Algorithm

* based on "Age Layered Population Structure":http://idesign.ucsc.edu/projects/alps.html general principle
* supporting multiple objectives, using "Pareto Strength (SPEA fitness)":http://www.cs.uu.nl/docs/vakken/ea/SPEA2.pdf
* uses "Phenotypic Duplicate Elimination":https://www.ads.tuwien.ac.at/publications/bib/pdf/raidl-99c.pdf 
* scaling computational effort (complex tasks use larger population and more restarts than simpler ones)
* effective implementation (easily paralelizable, a fitness computation complexity scales well)

h2. Description

The entire population has the tree topology, each node of the tree represents a small subpopulation (deme). The binary tree is used in this implementation but the number of subnodes of the node is not strictly limited to 2.

The initial subpopulation is seen as a "root node." 
The SPEA2's Pareto Strength fitness is computed for all individuals in the current subpopulation. Parents are then selected by the tournament from two candidates, selecting the winner with the better pareto strength. The selection is repeated until some target size of the parent pool is reached. (This is the "mating selection" in a SPEA terminology.)
The standard breeding operators (crossover, mutation) are applied to the parent pool, producing the offspring subpopulation. The "age" parameter of the offspring individual is computed using the classic ALPS method -- the age of the offspring the maximal age of parents plus one. A small amount of individuals (elite) with the best fitness is then copied from the original population to the offspring subpopulation (with the "age" parameter incremented) to guarantee the best solutions are maintained. 
Then the phenotypic duplication is performed if needed and unique individuals are considered as the new current subpopulation for the next generation.

When the certain number of generations is processed (the "age limit" paramete in the original ALPS paper), a new set of subpopulations is added: For each existing leaf node (a subpopulation) two new subpopulations are created as children. For instance if there are 4 youngest leaf nodes, new 8 children nodes are attached.
If the subpopulation node has a parent subpopulation node, the individuals for selection are taken from the current population AND from the parent subpopulation which enables the genetic material to flow from younger subpopulations to older ones, from leaf nodes to the root node.  It resembles the similar policy of breeding from two neighboring layers in the original ALPS algorithm.
Offsprings created by the breeding process are separated by the age parameter (the same technique as used in ALPS for passing individuals to older layers): If the age-layer index of the offspring is the same as the age index of the layer, the offspring remains in the current subpopulation, otherwise it is sent to the parent's (older) subpopulation.
There is the second selection mechanism applied to the parent pool (the "environmental selection" in the SPEA terminology): When current population of some node is bigger than needed -- because of immigrants from the younger subpopulations -- it is sorted by the Pareto Strength fitness first and then truncated to the target size - it ensures the old individuals with inferior fitness are removed from the population. The fitness evaluation and sorting required by the environmental selection is effectively used again for the mating selection in the next generation step.

Some subpopulations in the youngest (leaf) nodes are then restarted, if needed. The node is restarted when 
step % age_gap == index 
where step is the number of the population generations computed, age_gap has the same meaning in the original ALPS paper, an index is the order of the subpopulation in the leaf layer. The above rule means the youngest level (all leaf nodes) is not restarted completely, instead single nodes are restarted in round-robin way.

h2. Scaling computational effort

The population size grows when the algorithm runs for enough time (due to the "age limit" parameter). New subpopulations are added to leaf (young) nodes, enhancing the exploration aspect of the search. The number of "restarted individuals" also increases with time. 
This design ensures the CPU cycles are not wasted for easy tasks, however for harder tasks the population size quickly grows and new individuals are rapidly planted across the search space.

h2. Effective implementation 

The evaluation of task-dependent phenotypes (individuals) aside, the most complex parts of this algorithm are the computation of SPEA metric (Pareto Strength), the phenotype duplicates elimination and the sorting individuals by the fitness. For each of these three parts the complexity parameter is number of individuals in the subpopulation - not the number of individuals in the whole population.
Although the size of the entire population grows quadratically with the "age limit" parameter, the target size of the subpopulation remains constant and small, which is the advantage.
The majority of subpopulation processing therefore can be done concurrently - the only parts requiring synchronisation are:
- creating the parent pool where individuals are taken from the older node,
- sending some ("too old") offspring to the parent node.

Mail bver-AT-geret.org for details.

